// Function to recommend subjects with rollover functionality for irregular students
async function recommendIrregularSubjects(course, studentId) {
    const recommendedSubjectsDiv = document.getElementById('recommended-subjects');
    recommendedSubjectsDiv.innerHTML = '<h3>Recommended Subjects for Irregular Students:</h3>';
    const recommendedTable = document.createElement('table');

    recommendedTable.innerHTML = `
        <tr>
            <th>Year</th>
            <th>Semester</th>
            <th>Subject Code</th>
            <th>Subject Name</th>
            <th>Units</th>
            <th>Status</th>
            <th>Indicator</th>
        </tr>
    `;

    try {
        const studentDocRef = doc(db, `Students/${course}/StudentData`, studentId);
        const studentSnap = await getDoc(studentDocRef);

        if (!studentSnap.exists()) {
            console.warn('Student data not found in Firebase.');
            return;
        }

        const studentData = studentSnap.data();
        const currentYear = studentData.year;
        const currentSemester = studentData.semester;

        const enrollmentDocRef = doc(db, `Enrollments/${course}/EnrollmentData`, studentId);
        const enrollmentSnap = await getDoc(enrollmentDocRef);
        const failedSubjects = [];
        const missedSubjects = []; // Array to track subjects missed due to max units limit
        const rolloverSubjects = []; // Array for storing rollover subjects

        if (enrollmentSnap.exists()) {
            const enrollmentData = enrollmentSnap.data();
            if (enrollmentData.failedSubject) {
                for (const yr in enrollmentData.failedSubject) {
                    for (const sem in enrollmentData.failedSubject[yr]) {
                        const subjectsArray = enrollmentData.failedSubject[yr][sem];
                        if (Array.isArray(subjectsArray)) {
                            failedSubjects.push(...subjectsArray.map(subjectId => ({ subjectId, yr, sem })));
                        }
                    }
                }
            }
            // Load existing rollover subjects from the enrollment data
            if (enrollmentData.rolloverSubjects) {
                for (const yr in enrollmentData.rolloverSubjects) {
                    for (const sem in enrollmentData.rolloverSubjects[yr]) {
                        const subjectsArray = enrollmentData.rolloverSubjects[yr][sem];
                        if (Array.isArray(subjectsArray)) {
                            rolloverSubjects.push(...subjectsArray.map(subjectId => ({ subjectId, yr, sem })));
                        }
                    }
                }
            }
        }

        const subjectsRef = doc(db, `courses/${course}`);
        const subjectsSnap = await getDoc(subjectsRef);

        if (!subjectsSnap.exists()) {
            console.warn('Subjects data not found in Firebase.');
            return;
        }

        const subjectsData = subjectsSnap.data();
        const recommendedSubjects = [];
        let remainingUnits = subjectsData.years[currentYear]?.[currentSemester]?.maxUnits || 0;

        function addSubjectsToRecommended(subjectList, status, indicator, targetYear = null, targetSemester = null, isRollover = false) {
            subjectList.forEach(subject => {
                let subjectFound = false;

                for (const yr in subjectsData.subjects) {
                    for (const sem in subjectsData.subjects[yr]) {
                        const subjectData = subjectsData.subjects[yr][sem].find(sub => sub.subjectId === subject.subjectId);
                        if (subjectData) {
                            subjectFound = true;

                            if (isRollover || (remainingUnits >= subjectData.units)) {
                                recommendedSubjects.push({
                                    year: targetYear || subject.yr || yr,
                                    semester: targetSemester || subject.sem || sem,
                                    subjectId: subjectData.subjectId,
                                    subjectName: subjectData.subjectName,
                                    units: subjectData.units,
                                    status: isRollover ? 'Retake (Rollover)' : status,
                                    indicator: indicator
                                });

                                if (!isRollover) {
                                    remainingUnits -= subjectData.units; // Deduct units only if it's not a rollover
                                }
                            } else {
                                missedSubjects.push(subject); // If not enough units, add to missedSubjects
                            }
                            break;
                        }
                    }
                    if (subjectFound) break;
                }
            });
        }

        // Add rollover missed subjects first as "Retake (Rollover)" in the current semester
        addSubjectsToRecommended(missedSubjects.filter(sub => !rolloverSubjects.map(r => r.subjectId).includes(sub.subjectId)), 'Retake (Rollover)', 'Missed', currentYear, currentSemester, true);

        // Add rollover subjects that were missed in the previous semester/year
        addSubjectsToRecommended(rolloverSubjects, 'Retake (Rollover)', 'Missed Subject', currentYear, currentSemester, true);

        // Add failed subjects next, retaining original year/semester, marked as "Retake"
        addSubjectsToRecommended(failedSubjects, 'Retake', 'Failed');

        // Fetch current semester subjects eligible for the student (no failed prerequisites)
        const currentSemesterSubjects = subjectsData.subjects[currentYear]?.[currentSemester] || [];
        const availableSubjects = currentSemesterSubjects.filter(subject => {
            return subject.prerequisites.every(prerequisite => !failedSubjects.map(f => f.subjectId).includes(prerequisite));
        });

        // Add available subjects within remaining unit limit
        addSubjectsToRecommended(availableSubjects.map(sub => ({ subjectId: sub.subjectId })), 'Available', 'N/A', currentYear, currentSemester);

        // Handle any rollover of missed subjects for the next semester/year
        if (missedSubjects.length > 0) {
            let nextYear = currentYear;
            let nextSemester = (currentSemester === "2") ? "1" : "2"; // Switch semester

            if (nextSemester === "1") {
                nextYear = (parseInt(currentYear) + 1).toString(); // Increment year if moving to first semester
            }

            // Add missed subjects as "Retake (Rollover)" status in the next semester/year
            addSubjectsToRecommended(missedSubjects.filter(sub => !rolloverSubjects.map(r => r.subjectId).includes(sub.subjectId)), 'Retake (Rollover)', 'Missed', nextYear, nextSemester, true);
        }

        // Populate the recommended table with subjects
        recommendedSubjects.forEach(subject => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${subject.year}</td>
                <td>${subject.semester}</td>
                <td>${subject.subjectId}</td>
                <td>${subject.subjectName}</td>
                <td>${subject.units}</td>
                <td>${subject.status}</td>
                <td>${subject.indicator}</td>
            `;
            recommendedTable.appendChild(row);
        });

        recommendedSubjectsDiv.appendChild(recommendedTable);

        if (recommendedSubjects.length === 0) {
            recommendedSubjectsDiv.innerHTML += `<p>No subjects added to recommended list.</p>`;
            console.warn("No subjects added to recommended list.");
        }

        // Update the enrollment data with new rollover subjects in the database
        await updateEnrollmentDataWithRolloverSubjects(course, studentId, missedSubjects); // Pass course as an argument

    } catch (error) {
        console.error('Error fetching recommended subjects for irregular students:', error);
    }
}